# Docker Compose for Oatie AI Reporting Platform - Production Ready
# =================================================================
version: '3.8'

services:
  # PostgreSQL Database with production optimizations
  postgres:
    image: postgres:15-alpine
    container_name: oatie-postgres
    environment:
      POSTGRES_DB: oatie_production
      POSTGRES_USER: oatie_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_production_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U oatie_user -d oatie_production"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oatie-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Redis Cache with production configuration
  redis:
    image: redis:7-alpine
    container_name: oatie-redis
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru --tcp-keepalive 60
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oatie-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-3.0.0}
        GIT_COMMIT: ${GIT_COMMIT:-}
    container_name: oatie-backend
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://oatie_user:${POSTGRES_PASSWORD:-secure_production_password}@postgres:5432/oatie_production
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-production-key-change-me}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-jwt-secret-production-key-change-me}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-your-encryption-key-32-chars-long}
      - ORACLE_FUSION_URL=${ORACLE_FUSION_URL:-}
      - ORACLE_USERNAME=${ORACLE_USERNAME:-}
      - ORACLE_PASSWORD=${ORACLE_PASSWORD:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./logs:/app/logs:rw
      - ./uploads:/app/uploads:rw
      - ./backups:/app/backups:rw
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - oatie-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Frontend Web Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-3.0.0}
        GIT_COMMIT: ${GIT_COMMIT:-}
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
        REACT_APP_ENVIRONMENT: production
    container_name: oatie-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - oatie-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: oatie-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - oatie-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: oatie-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    depends_on:
      - prometheus
    networks:
      - oatie-network
    restart: unless-stopped

  # Nginx Load Balancer (for production)
  nginx:
    image: nginx:alpine
    container_name: oatie-nginx
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    depends_on:
      - frontend
      - backend
    networks:
      - oatie-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  oatie-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
