# Production Deployment Pipeline with Blue-Green Deployment
name: Deploy to Production

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
  workflow_dispatch:
    inputs:
      deployment_strategy:
        description: 'Deployment strategy'
        required: true
        default: 'blue-green'
        type: choice
        options:
          - blue-green
          - rolling
          - canary
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBERNETES_NAMESPACE: oatie-ai-production

jobs:
  # Security and Quality Checks
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [security-scan]
    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-digest: ${{ steps.build-frontend.outputs.digest }}
      backend-digest: ${{ steps.build-backend.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/docker/Dockerfile.frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push backend image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/docker/Dockerfile.backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run tests
        run: |
          echo "Running test suite..."
          # Add actual test commands here
          echo "Tests completed successfully"

  # Database Migration
  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main' && !inputs.rollback
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Create database backup
        run: |
          echo "Creating database backup..."
          # Add actual backup script here
          kubectl exec -n ${{ env.KUBERNETES_NAMESPACE }} \
            deployment/postgres -- pg_dump \
            -U ${{ secrets.DB_USER }} \
            -h localhost \
            ${{ secrets.DB_NAME }} > backup-$(date +%Y%m%d-%H%M%S).sql

      - name: Run database migrations
        run: |
          echo "Running Alembic migrations..."
          export DATABASE_URL="${{ secrets.DATABASE_URL }}"
          cd backend
          alembic upgrade head

  # Blue-Green Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, database-migration]
    if: github.ref == 'refs/heads/main'
    environment: production
    concurrency:
      group: production-deployment
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Determine current environment
        id: current-env
        run: |
          CURRENT=$(kubectl get service oatie-frontend-active -n ${{ env.KUBERNETES_NAMESPACE }} \
            -o jsonpath='{.spec.selector.environment}' 2>/dev/null || echo "blue")
          if [ "$CURRENT" = "blue" ]; then
            echo "current=blue" >> $GITHUB_OUTPUT
            echo "target=green" >> $GITHUB_OUTPUT
          else
            echo "current=green" >> $GITHUB_OUTPUT
            echo "target=blue" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to target environment
        run: |
          TARGET_ENV="${{ steps.current-env.outputs.target }}"
          echo "Deploying to $TARGET_ENV environment"
          
          # Update Kubernetes manifests with new images
          sed -i "s|image: .*frontend:.*|image: ${{ needs.build-and-test.outputs.frontend-image }}|g" \
            infrastructure/kubernetes/frontend-$TARGET_ENV.yaml
          sed -i "s|image: .*backend:.*|image: ${{ needs.build-and-test.outputs.backend-image }}|g" \
            infrastructure/kubernetes/backend-$TARGET_ENV.yaml
          
          # Deploy to target environment
          kubectl apply -f infrastructure/kubernetes/frontend-$TARGET_ENV.yaml -n ${{ env.KUBERNETES_NAMESPACE }}
          kubectl apply -f infrastructure/kubernetes/backend-$TARGET_ENV.yaml -n ${{ env.KUBERNETES_NAMESPACE }}
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/oatie-frontend-$TARGET_ENV -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s
          kubectl rollout status deployment/oatie-backend-$TARGET_ENV -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s

      - name: Health check on target environment
        id: health-check
        run: |
          TARGET_ENV="${{ steps.current-env.outputs.target }}"
          echo "Running health checks on $TARGET_ENV environment"
          
          # Get the service endpoint
          FRONTEND_IP=$(kubectl get service oatie-frontend-$TARGET_ENV -n ${{ env.KUBERNETES_NAMESPACE }} \
            -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          BACKEND_IP=$(kubectl get service oatie-backend-$TARGET_ENV -n ${{ env.KUBERNETES_NAMESPACE }} \
            -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          # Health check with retry
          for i in {1..10}; do
            if curl -f http://$BACKEND_IP/health; then
              echo "Backend health check passed"
              echo "backend_healthy=true" >> $GITHUB_OUTPUT
              break
            fi
            echo "Health check attempt $i failed, retrying in 30s..."
            sleep 30
          done
          
          if [ "$i" -eq 10 ]; then
            echo "Health check failed after 10 attempts"
            echo "backend_healthy=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Switch traffic to new environment
        if: steps.health-check.outputs.backend_healthy == 'true'
        run: |
          TARGET_ENV="${{ steps.current-env.outputs.target }}"
          echo "Switching traffic to $TARGET_ENV environment"
          
          # Update active service selectors
          kubectl patch service oatie-frontend-active -n ${{ env.KUBERNETES_NAMESPACE }} \
            -p '{"spec":{"selector":{"environment":"'$TARGET_ENV'"}}}'
          kubectl patch service oatie-backend-active -n ${{ env.KUBERNETES_NAMESPACE }} \
            -p '{"spec":{"selector":{"environment":"'$TARGET_ENV'"}}}'
          
          echo "Traffic switched successfully to $TARGET_ENV"

      - name: Final health check
        run: |
          echo "Running final health check on active environment"
          
          # Wait for DNS propagation
          sleep 60
          
          # Final verification
          curl -f ${{ secrets.PRODUCTION_URL }}/health
          echo "Production deployment completed successfully"

      - name: Cleanup old environment
        if: success()
        run: |
          OLD_ENV="${{ steps.current-env.outputs.current }}"
          echo "Keeping old environment $OLD_ENV for potential rollback"
          # Old environment is kept for quick rollback capability

  # Rollback capability
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: inputs.rollback == true
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Rollback to previous environment
        run: |
          CURRENT=$(kubectl get service oatie-frontend-active -n ${{ env.KUBERNETES_NAMESPACE }} \
            -o jsonpath='{.spec.selector.environment}')
          if [ "$CURRENT" = "blue" ]; then
            TARGET="green"
          else
            TARGET="blue"
          fi
          
          echo "Rolling back from $CURRENT to $TARGET"
          
          # Switch traffic back
          kubectl patch service oatie-frontend-active -n ${{ env.KUBERNETES_NAMESPACE }} \
            -p '{"spec":{"selector":{"environment":"'$TARGET'"}}}'
          kubectl patch service oatie-backend-active -n ${{ env.KUBERNETES_NAMESPACE }} \
            -p '{"spec":{"selector":{"environment":"'$TARGET'"}}}'
          
          echo "Rollback completed successfully"

  # Post-deployment monitoring
  post-deployment:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Trigger monitoring alerts
        run: |
          echo "Setting up enhanced monitoring for new deployment"
          # Add Prometheus alert manager rules
          # Send notifications to Slack/Teams
          echo "Monitoring configured successfully"

      - name: Performance baseline test
        run: |
          echo "Running performance baseline test"
          # Run automated performance tests
          echo "Performance test completed"