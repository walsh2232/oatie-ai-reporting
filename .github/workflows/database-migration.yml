# Database Migration Automation
name: Database Migration

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      migration_direction:
        required: false
        type: string
        default: 'upgrade'
      target_revision:
        required: false
        type: string
        default: 'head'
    secrets:
      DATABASE_URL:
        required: true
      BACKUP_STORAGE_KEY:
        required: false
      KUBE_CONFIG:
        required: true

  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      migration_direction:
        description: 'Migration direction'
        required: true
        default: 'upgrade'
        type: choice
        options:
          - upgrade
          - downgrade
      target_revision:
        description: 'Target revision (head for latest)'
        required: false
        default: 'head'
        type: string
      dry_run:
        description: 'Dry run (no actual changes)'
        required: false
        default: false
        type: boolean

env:
  KUBERNETES_NAMESPACE: oatie-ai-${{ inputs.environment }}

jobs:
  # Pre-migration validation
  pre-migration-checks:
    name: Pre-migration Validation
    runs-on: ubuntu-latest
    outputs:
      backup_name: ${{ steps.backup-info.outputs.backup_name }}
      current_revision: ${{ steps.current-state.outputs.revision }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install alembic psycopg2-binary

      - name: Check database connectivity
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "Testing database connectivity..."
          cd backend
          python -c "
          import asyncio
          from core.database import DatabaseManager
          async def test():
              db = DatabaseManager('${{ secrets.DATABASE_URL }}')
              await db.initialize()
              print('Database connection successful')
              await db.close()
          asyncio.run(test())
          "

      - name: Get current migration state
        id: current-state
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cd backend
          CURRENT_REV=$(alembic current | cut -d' ' -f1)
          echo "Current revision: $CURRENT_REV"
          echo "revision=$CURRENT_REV" >> $GITHUB_OUTPUT

      - name: Check pending migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cd backend
          echo "Checking for pending migrations..."
          alembic check || echo "Migrations need to be applied"

      - name: Generate backup name
        id: backup-info
        run: |
          BACKUP_NAME="oatie-db-backup-$(date +%Y%m%d-%H%M%S)-${{ steps.current-state.outputs.revision }}"
          echo "backup_name=$BACKUP_NAME" >> $GITHUB_OUTPUT
          echo "Generated backup name: $BACKUP_NAME"

  # Create database backup
  backup-database:
    name: Create Database Backup
    runs-on: ubuntu-latest
    needs: [pre-migration-checks]
    if: inputs.migration_direction == 'upgrade' && !inputs.dry_run
    steps:
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Create database backup
        run: |
          echo "Creating database backup: ${{ needs.pre-migration-checks.outputs.backup_name }}"
          
          # Get database pod
          DB_POD=$(kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }} \
            -l app=postgres -o jsonpath='{.items[0].metadata.name}')
          
          # Create backup
          kubectl exec -n ${{ env.KUBERNETES_NAMESPACE }} $DB_POD -- \
            pg_dump -U postgres oatie_ai > /tmp/${{ needs.pre-migration-checks.outputs.backup_name }}.sql
          
          echo "Backup created successfully"

      - name: Upload backup to storage
        if: env.BACKUP_STORAGE_KEY != ''
        run: |
          echo "Uploading backup to cloud storage..."
          # Add cloud storage upload logic here
          # aws s3 cp /tmp/${{ needs.pre-migration-checks.outputs.backup_name }}.sql s3://oatie-backups/
          echo "Backup uploaded to storage"

      - name: Store backup locally
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.pre-migration-checks.outputs.backup_name }}
          path: /tmp/${{ needs.pre-migration-checks.outputs.backup_name }}.sql
          retention-days: 30

  # Run migrations
  run-migrations:
    name: Execute Database Migration
    runs-on: ubuntu-latest
    needs: [pre-migration-checks, backup-database]
    if: always() && (needs.backup-database.result == 'success' || inputs.dry_run || inputs.migration_direction == 'downgrade')
    environment: ${{ inputs.environment }}-database
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install alembic psycopg2-binary

      - name: Show migration plan
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cd backend
          echo "Migration plan:"
          if [ "${{ inputs.migration_direction }}" = "upgrade" ]; then
            alembic history --verbose
            echo "Migrations to apply:"
            alembic show ${{ inputs.target_revision }}
          else
            echo "Downgrade plan to: ${{ inputs.target_revision }}"
            alembic show ${{ inputs.target_revision }}
          fi

      - name: Execute dry run
        if: inputs.dry_run
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cd backend
          echo "DRY RUN - No actual changes will be made"
          echo "Would execute: alembic ${{ inputs.migration_direction }} ${{ inputs.target_revision }}"

      - name: Execute migration
        if: '!inputs.dry_run'
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cd backend
          echo "Executing migration: ${{ inputs.migration_direction }} to ${{ inputs.target_revision }}"
          
          # Execute the migration
          if [ "${{ inputs.migration_direction }}" = "upgrade" ]; then
            alembic upgrade ${{ inputs.target_revision }}
          else
            alembic downgrade ${{ inputs.target_revision }}
          fi
          
          echo "Migration completed successfully"

      - name: Verify migration
        if: '!inputs.dry_run'
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cd backend
          echo "Verifying migration state..."
          NEW_REV=$(alembic current | cut -d' ' -f1)
          echo "New revision: $NEW_REV"
          
          # Basic data integrity check
          python -c "
          import asyncio
          from core.database import DatabaseManager
          async def verify():
              db = DatabaseManager('${{ secrets.DATABASE_URL }}')
              await db.initialize()
              # Add specific verification queries here
              print('Database verification successful')
              await db.close()
          asyncio.run(verify())
          "

  # Post-migration validation
  post-migration-validation:
    name: Post-migration Validation
    runs-on: ubuntu-latest
    needs: [run-migrations]
    if: success() && !inputs.dry_run
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run data validation tests
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "Running post-migration validation tests..."
          cd backend
          python -m pytest tests/database/test_migrations.py -v

      - name: Check application health
        run: |
          echo "Checking application health after migration..."
          
          # Configure kubectl
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > /tmp/kubeconfig
          export KUBECONFIG=/tmp/kubeconfig
          
          # Restart application pods to pick up schema changes
          kubectl rollout restart deployment/oatie-backend -n ${{ env.KUBERNETES_NAMESPACE }}
          kubectl rollout status deployment/oatie-backend -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=300s
          
          # Health check
          kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }} -l app=oatie-backend

      - name: Performance impact check
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "Checking performance impact..."
          cd backend
          python scripts/performance_check.py --post-migration

  # Rollback capability
  rollback-migration:
    name: Rollback Migration
    runs-on: ubuntu-latest
    needs: [pre-migration-checks, run-migrations, post-migration-validation]
    if: failure() && needs.pre-migration-checks.outputs.current_revision != ''
    environment: ${{ inputs.environment }}-database
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install alembic psycopg2-binary

      - name: Rollback to previous revision
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cd backend
          echo "Rolling back to revision: ${{ needs.pre-migration-checks.outputs.current_revision }}"
          alembic downgrade ${{ needs.pre-migration-checks.outputs.current_revision }}
          echo "Rollback completed"

      - name: Restore from backup if needed
        if: failure()
        run: |
          echo "Migration rollback failed, considering backup restore..."
          echo "Manual intervention required"
          exit 1

  # Notification
  notify-migration-status:
    name: Notify Migration Status
    runs-on: ubuntu-latest
    needs: [pre-migration-checks, backup-database, run-migrations, post-migration-validation, rollback-migration]
    if: always()
    steps:
      - name: Determine overall status
        id: status
        run: |
          if [ "${{ needs.rollback-migration.result }}" = "success" ]; then
            echo "status=rolled_back" >> $GITHUB_OUTPUT
          elif [ "${{ needs.post-migration-validation.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

      - name: Send notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "Database Migration ${{ steps.status.outputs.status }}",
              attachments: [{
                color: "${{ steps.status.outputs.status == 'success' && 'good' || steps.status.outputs.status == 'rolled_back' && 'warning' || 'danger' }}",
                fields: [{
                  title: "Environment",
                  value: "${{ inputs.environment }}",
                  short: true
                }, {
                  title: "Direction", 
                  value: "${{ inputs.migration_direction }}",
                  short: true
                }, {
                  title: "Target",
                  value: "${{ inputs.target_revision }}",
                  short: true
                }, {
                  title: "Status",
                  value: "${{ steps.status.outputs.status }}",
                  short: true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}