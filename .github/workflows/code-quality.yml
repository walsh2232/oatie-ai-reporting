name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-python:
    name: Lint Python Code
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, '.py') || contains(github.event.pull_request.changed_files, '.py')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black pylint mypy flake8 isort bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Format with Black
      run: |
        black --check --diff .
    
    - name: Sort imports with isort
      run: |
        isort --check-only --diff .
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Lint with pylint
      run: |
        find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" | xargs pylint --exit-zero
    
    - name: Type check with mypy
      run: |
        mypy . --ignore-missing-imports --no-strict-optional
    
    - name: Security check with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true

  lint-typescript:
    name: Lint TypeScript/JavaScript Code
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, '.ts') || contains(github.event.head_commit.modified, '.js') || contains(github.event.pull_request.changed_files, '.ts') || contains(github.event.pull_request.changed_files, '.js')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        if [ -f package.json ]; then npm ci; fi
    
    - name: Lint with ESLint
      run: |
        if [ -f package.json ] && npm list eslint --depth=0 > /dev/null 2>&1; then
          npx eslint . --ext .ts,.js,.tsx,.jsx --format json --output-file eslint-report.json || true
        fi
    
    - name: Format check with Prettier
      run: |
        if [ -f package.json ] && npm list prettier --depth=0 > /dev/null 2>&1; then
          npx prettier --check .
        fi
    
    - name: Type check with TypeScript
      run: |
        if [ -f tsconfig.json ]; then
          npx tsc --noEmit
        fi

  test-python:
    name: Test Python Code
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, '.py') || contains(github.event.pull_request.changed_files, '.py')
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Run tests with pytest
      run: |
        if [ -d tests ] || find . -name "test_*.py" | grep -q .; then
          pytest --cov=. --cov-report=xml --cov-report=html --cov-fail-under=95
        else
          echo "No Python tests found"
        fi
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: codecov-python

  test-javascript:
    name: Test JavaScript/TypeScript Code
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, '.ts') || contains(github.event.head_commit.modified, '.js') || contains(github.event.pull_request.changed_files, '.ts') || contains(github.event.pull_request.changed_files, '.js')
    
    strategy:
      matrix:
        node-version: ['16', '18', '20']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        if [ -f package.json ]; then npm ci; fi
    
    - name: Run tests
      run: |
        if [ -f package.json ] && npm run test --if-present; then
          npm run test:coverage || npm test
        else
          echo "No JavaScript/TypeScript tests configured"
        fi
    
    - name: Upload coverage to Codecov
      if: matrix.node-version == '18'
      uses: codecov/codecov-action@v3
      with:
        flags: javascript
        name: codecov-javascript

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, python
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'