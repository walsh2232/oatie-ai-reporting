name: "CodeQL Advanced Security"

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 6 * * 1'  # Weekly on Monday at 6:30 AM UTC

jobs:
  analyze:
    name: Analyze Code
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python' ]
        # CodeQL supports: 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # For more details on CodeQL's query packs, refer to:
        # https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        queries: +security-extended,security-and-quality

    # Backend: Python setup and build
    - name: Set up Python
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install Python dependencies
      if: matrix.language == 'python'
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -e .

    # Frontend: Node.js setup and build
    - name: Set up Node.js
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Node.js dependencies
      if: matrix.language == 'javascript'
      run: |
        cd frontend
        npm ci

    - name: Build frontend
      if: matrix.language == 'javascript'
      run: |
        cd frontend
        npm run build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  # Additional security checks for GitHub Pro
  dependency-review:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          allow-ghsas: GHSA-xxxx-xxxx-xxxx  # Example: allow specific advisories
          deny-licenses: GPL-2.0, GPL-3.0  # Example: deny certain licenses

  # Secret scanning for GitHub Pro
  secret-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run secret scanning
        run: |
          echo "Checking for common secrets and patterns..."
          
          # Check for common secret patterns
          echo "üîç Scanning for API keys..."
          if grep -r "api[_-]key\s*=\s*['\"][^'\"]*['\"]" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.md"; then
            echo "‚ö†Ô∏è Potential API key found!"
            exit 1
          fi
          
          echo "üîç Scanning for database URLs..."
          if grep -r "DATABASE_URL\s*=\s*['\"]postgres://[^'\"]*['\"]" . --exclude-dir=.git --exclude-dir=node_modules; then
            echo "‚ö†Ô∏è Potential database URL with credentials found!"
            exit 1
          fi
          
          echo "üîç Scanning for private keys..."
          if grep -r "BEGIN PRIVATE KEY" . --exclude-dir=.git --exclude-dir=node_modules; then
            echo "‚ö†Ô∏è Private key found!"
            exit 1
          fi
          
          echo "‚úÖ No obvious secrets detected"

  # SAST scanning with additional tools
  sast-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install security scanning tools
        run: |
          pip install bandit semgrep safety

      - name: Run Bandit (Python security scan)
        run: |
          cd backend
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/ || true

      - name: Run Safety (Python dependency scan)
        run: |
          cd backend
          safety check --json --output safety-report.json || true
          safety check || true

      - name: Run Semgrep (Multi-language SAST)
        run: |
          semgrep --config=auto --json --output=semgrep-report.json . || true
          semgrep --config=auto . || true

      - name: Upload SAST results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: sast-reports
          path: |
            backend/bandit-report.json
            backend/safety-report.json
            semgrep-report.json

  # Container security scanning
  container-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker build -t oatie-backend:security-scan ./backend
          docker build -t oatie-frontend:security-scan ./frontend

      - name: Run Trivy vulnerability scanner - Backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'oatie-backend:security-scan'
          format: 'sarif'
          output: 'trivy-backend.sarif'

      - name: Run Trivy vulnerability scanner - Frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'oatie-frontend:security-scan'
          format: 'sarif'
          output: 'trivy-frontend.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-backend.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-frontend.sarif'

  # License compliance check
  license-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install license checking tools
        run: |
          pip install pip-licenses
          npm install -g license-checker

      - name: Check Python licenses
        run: |
          cd backend
          pip install -e .
          pip-licenses --format=json --output-file=python-licenses.json
          pip-licenses

      - name: Check Node.js licenses
        run: |
          cd frontend
          npm ci
          license-checker --json --out nodejs-licenses.json
          license-checker

      - name: Upload license reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: license-reports
          path: |
            backend/python-licenses.json
            frontend/nodejs-licenses.json
