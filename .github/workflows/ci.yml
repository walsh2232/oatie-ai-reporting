name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Security and Dependency Audit
  security-audit:
    runs-on: ubuntu-latest
    name: Security Audit
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit pip-audit

      - name: Run safety check
        run: |
          safety check --json --output safety-report.json || true
          
      - name: Run bandit security check
        run: |
          bandit -r backend/ -f json -o bandit-report.json || true
          
      - name: Run pip-audit
        run: |
          pip-audit --desc --format=json --output=pip-audit-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
            pip-audit-report.json

  # Python Backend Quality Checks
  python-quality:
    runs-on: ubuntu-latest
    name: Python Code Quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Check code formatting with Black
        run: |
          black --check --diff backend/

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff backend/

      - name: Run Pylint
        run: |
          pylint backend/oatie/

      - name: Run MyPy type checking
        run: |
          mypy backend/oatie/

      - name: Run tests with coverage
        run: |
          pytest --cov=oatie --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Quality Checks
  frontend-quality:
    runs-on: ubuntu-latest
    name: Frontend Code Quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting with Prettier
        run: npm run format:check

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type checking
        run: npm run type-check

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Build and Test
  build-test:
    needs: [security-audit, python-quality, frontend-quality]
    runs-on: ubuntu-latest
    name: Build and Integration Test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Run integration tests
        run: |
          # Integration tests would go here
          echo "Integration tests placeholder"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            frontend/dist/
            backend/dist/

  # Documentation Check
  docs-check:
    runs-on: ubuntu-latest
    name: Documentation Check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"

      - name: Check documentation build
        run: |
          # mkdocs build --strict
          echo "Documentation build check placeholder"

      - name: Check README links
        run: |
          # Check for broken links in README
          echo "README link check placeholder"