# Staging Environment Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oatie-backend
  namespace: oatie-ai-staging
  labels:
    app: oatie-backend
    environment: staging
    version: v3.0.0
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: oatie-backend
      environment: staging
  template:
    metadata:
      labels:
        app: oatie-backend
        environment: staging
        version: v3.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: oatie-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: backend
        image: ghcr.io/walsh2232/oatie-ai-reporting/backend:staging-latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "staging"
        - name: DEBUG
          value: "false"
        - name: LOG_LEVEL
          value: "DEBUG"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: oatie-staging-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: oatie-staging-secrets
              key: redis-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: oatie-staging-secrets
              key: secret-key
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: oatie-staging-secrets
              key: encryption-key
        - name: CORS_ORIGINS
          value: "https://staging.oatie.company.com,https://staging-api.oatie.company.com"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-log
          mountPath: /var/log
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-log
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: oatie-backend
  namespace: oatie-ai-staging
  labels:
    app: oatie-backend
    environment: staging
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: oatie-backend
    environment: staging

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oatie-frontend
  namespace: oatie-ai-staging
  labels:
    app: oatie-frontend
    environment: staging
    version: v3.0.0
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: oatie-frontend
      environment: staging
  template:
    metadata:
      labels:
        app: oatie-frontend
        environment: staging
        version: v3.0.0
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        fsGroup: 101
      containers:
      - name: frontend
        image: ghcr.io/walsh2232/oatie-ai-reporting/frontend:staging-latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "staging"
        - name: BACKEND_URL
          value: "https://staging-api.oatie.company.com"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache/nginx
        - name: var-run
          mountPath: /var/run
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-cache
        emptyDir: {}
      - name: var-run
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: oatie-frontend
  namespace: oatie-ai-staging
  labels:
    app: oatie-frontend
    environment: staging
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: oatie-frontend
    environment: staging

---
# Staging Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oatie-staging
  namespace: oatie-ai-staging
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/rate-limit: "50"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
spec:
  tls:
  - hosts:
    - staging.oatie.company.com
    - staging-api.oatie.company.com
    secretName: oatie-staging-tls-cert
  rules:
  - host: staging.oatie.company.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: oatie-frontend
            port:
              number: 80
  - host: staging-api.oatie.company.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: oatie-backend
            port:
              number: 80